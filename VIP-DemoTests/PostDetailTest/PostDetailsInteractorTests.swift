//
//  PostDetailsInteractorTests.swift
//  VIP-Demo
//
//  Created by admin on 4/1/19.
//  Copyright (c) 2019 admin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import VIP_Demo
import XCTest

class PostDetailsInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: PostDetailsInteractor!

  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupPostDetailsInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupPostDetailsInteractor()
  {
    sut = PostDetailsInteractor()
  }
    
  
  // MARK: Tests
  
  func testfetchPosts()
  {
    let presenterSpy = PostDetailsPresentationLogicSpy()
    sut.presenter = presenterSpy
    let worker = DetailsWorkerSpy()
    sut.worker = worker
    sut.fetchPosts(request: PostDetails.Post.Request())
    let expectations = expectation(description: "The api request is successful")
    worker.fetchPosts(completion: {response,error in
        XCTAssertNil(error, "Api request return some error")
        expectations.fulfill()
        //since presenter need some time to present view just after receiving response
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            XCTAssertTrue(presenterSpy.presentPostsCalled, "fetchPosts() should ask the presenter to present the post")
        }
    })
    waitForExpectations(timeout: 30, handler: { (error) in
        if let error = error {
            XCTAssertNil(error, "The api request does not give response")
        }
    })
  }
}


final class DetailsWorkerSpy: PostDetailsWorker {

    var fetchPostsCalled = false

    var fetchError = false

    enum AlbumsWorkerSpyError: Error {

        case generic
    }


    override func fetchPosts(completion: @escaping ([PostDetails.Post.Response]?, Error?) -> ()) {
        fetchPostsCalled = true
        let presenterSpy = PostDetailsPresentationLogicSpy()

        guard let publicUrl = URL(string: APPURL.BaseURL + APPURL.UrlCollection.UserDetailUrl.UserPosts) else { return }
        URLSession.shared.dataTask(with: publicUrl) { (data, response
            , error) in
            guard let data = data else { return }
            do {
                let decoder = JSONDecoder()
                let publicData = try decoder.decode([PostDetails.Post.Response].self, from: data)
                
                completion(publicData,nil)
               
            } catch let err {
                completion(nil,err)
            }
        }.resume()
        
    }
}


    class PostDetailsPresentationLogicSpy: PostDetailsPresentationLogic
    {
        var presentPostsCalled = false

        func presentPosts() {

            presentPostsCalled = true
        }
    }
