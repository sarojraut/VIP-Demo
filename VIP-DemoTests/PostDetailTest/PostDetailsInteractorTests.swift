//
//  PostDetailsInteractorTests.swift
//  VIP-Demo
//
//  Created by admin on 4/1/19.
//  Copyright (c) 2019 admin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import VIP_Demo
import XCTest

class PostDetailsInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: PostDetailsInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupPostDetailsInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupPostDetailsInteractor()
  {
    sut = PostDetailsInteractor()
  }
  
  // MARK: Test doubles
  
  class PostDetailsPresentationLogicSpy: PostDetailsPresentationLogic
  {
    var presentSomethingCalled = false
    
    func presentPosts() {
        
      presentSomethingCalled = true
    }
  }
  
  // MARK: Tests
  
  func testfetchPosts()
  {
    // Given
    let spy = PostDetailsPresentationLogicSpy()
    sut.presenter = spy
    let request = PostDetails.Post.Request()
    
    // When
    sut.fetchPosts(request: request)
    
    // Then
    XCTAssertTrue(spy.presentSomethingCalled, "doSomething(request:) should ask the presenter to format the result")
  }
}


final class DetailsWorkerSpy: PostDetailsWorker {
    
    var fetchPostsCalled = false
    
    var fetchError = false
    
    enum AlbumsWorkerSpyError: Error {
        
        case generic
    }
    
    override func fetchPosts(completion: @escaping ([PostDetails.Post.Response]?, Error?) -> ()) {
        fetchPostsCalled = true
        
        if fetchError {
            
            completion([], AlbumsWorkerSpyError.generic)
            
        } else {
            
            completion([], nil)
        }
    }
}
